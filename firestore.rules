rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function requireFields(object, required) {
      return object.keys().hasAll(required) && object.keys().hasOnly(required);
    }

    match /users/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;

      function isAuthorized() {
        return request.auth.uid != null
            && request.auth.uid == userId;
      }

      function isChoosingFiatCurrency() {
        return isAuthorized()
            && requireFields(request.resource.data, ['fiat_currency'])
            && requireFields(request.resource.data.fiat_currency, ['name', 'symbol'])
            && request.resource.data.fiat_currency.symbol in get(/databases/$(database)/documents/system/fiat).data.currencies.keys()
            && request.resource.data.fiat_currency.name in get(/databases/$(database)/documents/system/fiat).data.currencies.values();
      }

      function isChangingFiatCurrency() {
        return isAuthorized()
            && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fiat_currency'])
            && requireFields(request.resource.data.fiat_currency, ['name', 'symbol'])
            && request.resource.data.fiat_currency.symbol in get(/databases/$(database)/documents/system/fiat).data.currencies.keys()
            && request.resource.data.fiat_currency.name in get(/databases/$(database)/documents/system/fiat).data.currencies.values();
      }

      allow create: if isChoosingFiatCurrency();
      allow update: if isChangingFiatCurrency();

      match /portfolio/{cryptoId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;

        match /buy_records/{recordId} {
          allow read: if request.auth != null && request.auth.uid == userId;

          function isAddingNewRecord() {
            return isAuthorized()
                && cryptoId in get(/databases/$(database)/documents/system/crypto).data.currencies
                && requireFields(request.resource.data, ['buy_price', 'amount', 'timestamp'])
                && request.resource.data.buy_price is float
                && request.resource.data.amount is float
                && request.resource.data.timestamp == request.time;
          }

          function isEdittingExistingRecord() {
            return isAuthorized()
                && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['buy_price', 'amount'])
                && request.resource.data.buy_price is float
                && request.resource.data.amount is float;
          }

          allow create: if isAddingNewRecord();
          allow update: if isEdittingExistingRecord();
          allow delete: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    match /system/fiat {
      allow get: if request.auth != null;
    }

    match /system/crypto {
      allow get: if request.auth != null;
    }
  }
}